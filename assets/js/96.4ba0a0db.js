(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{719:function(s,a,n){"use strict";n.r(a);var r=n(18),e=Object(r.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("blockquote",[n("p",[s._v("数组是 js 中最常用到的数据集合，其内置的方法有很多，熟练掌握这些方法，可以有效的提高我们的工作效率，同时对我们的代码质量也是有很大影响。")])]),s._v(" "),n("h2",{attrs:{id:"一、创建数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、创建数组"}},[s._v("#")]),s._v(" 一、创建数组")]),s._v(" "),n("h4",{attrs:{id:"_1-使用数组字面量表示法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用数组字面量表示法"}},[s._v("#")]),s._v(" 1.使用数组字面量表示法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var arr4 = [];   //创建一个空数组\nvar arr5 = [20];   // 创建一个包含1项数据为20的数组\nvar arr6 = ["lily","lucy","Tom"];   // 创建一个包含3个字符串的数组\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h4",{attrs:{id:"_2-使用-array-构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用-array-构造函数"}},[s._v("#")]),s._v(" 2.使用 Array 构造函数")]),s._v(" "),n("h6",{attrs:{id:"无参构造"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#无参构造"}},[s._v("#")]),s._v(" 无参构造")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr1 = new Array();   //创建一个空数组\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h6",{attrs:{id:"带参构造"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#带参构造"}},[s._v("#")]),s._v(" 带参构造")]),s._v(" "),n("p",[s._v("如果只传一个数值参数，则表示创建一个初始长度为指定数值的空数组")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr2 = new Array(20);   // 创建一个包含20项的数组\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("如果传入一个非数值的参数或者参数个数大于 1，则表示创建一个包含指定元素的数组")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var arr3 = new Array("lily","lucy","Tom");   // 创建一个包含3个字符串的数组\nvar array4 = new Array(\'23\'); // ["23"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h4",{attrs:{id:"_3-array-of-方法创建数组-es6-新增"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-array-of-方法创建数组-es6-新增"}},[s._v("#")]),s._v(" 3.Array.of 方法创建数组(es6 新增)")]),s._v(" "),n("p",[s._v("ES6 为数组新增创建方法的目的之一，是帮助开发者在使用 Array 构造器时避开 js 语言的一个怪异点。")]),s._v(" "),n("p",[n("strong",[s._v("Array.of()方法总会创建一个包含所有传入参数的数组，而不管参数的数量与类型。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = Array.of(1, 2);\nconsole.log(arr.length);//2\nlet arr1 = Array.of(3);\nconsole.log(arr1.length);//1\nconsole.log(arr1[0]);//3\nlet arr2 = Array.of('2');\nconsole.log(arr2.length);//1\nconsole.log(arr2[0]);//'2'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h4",{attrs:{id:"_4-array-from-方法创建数组-es6-新增"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-array-from-方法创建数组-es6-新增"}},[s._v("#")]),s._v(" 4.Array.from 方法创建数组(es6 新增)")]),s._v(" "),n("p",[s._v("在 js 中将"),n("strong",[s._v("非数组对象转换为真正的数组")]),s._v("是非常麻烦的。在 ES6 中，将可迭代对象或者类数组对象作为第一个参数传入，Array.from()就能返回一个数组。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function arga(...args) {  //...args剩余参数数组,由传递给函数的实际参数提供\n    let arg = Array.from(args);\n    console.log(arg);\n}\narga('arr1', 26, 'from'); // ['arr1',26,'from']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h6",{attrs:{id:"映射转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#映射转换"}},[s._v("#")]),s._v(" 映射转换")]),s._v(" "),n("p",[s._v("如果你想实行进一步的数组转换，你可以向 Array.from()方法传递一个映射用的函数作为第二个参数。此函数会将数组对象的每一个值转换为目标形式，并将其存储在目标数组的对应位置上。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function arga(...args) {  \n     return Array.from(args, value => value + 1);\n}\nlet arr = arga('arr', 26, 'pop');\nconsole.log(arr);//['arr1',27,'pop1']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("如果映射函数需要在对象上工作，你可以手动传递第三个参数给 Array.from()方法，从而指定映射函数内部的 this 值")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const helper = {\n  diff: 1,\n  add(value) {\n    return value + this.diff;\n  }\n}\nfunction translate() {\n //arguments 是一个对应于传递给函数的参数的类数组对象\n  return Array.from(arguments, helper.add, helper); \n}\nlet arr = translate('liu', 26, 'man');\nconsole.log(arr); // [\"liu1\", 27, \"man1\"]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h2",{attrs:{id:"二、数组方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、数组方法"}},[s._v("#")]),s._v(" 二、数组方法")]),s._v(" "),n("h4",{attrs:{id:"数组原型方法主要有以下这些"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组原型方法主要有以下这些"}},[s._v("#")]),s._v(" 数组原型方法主要有以下这些")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("join()")]),s._v("：用指定的分隔符将数组每一项拼接为字符串")]),s._v(" "),n("li",[n("code",[s._v("push()")]),s._v(" ：向数组的末尾添加新元素")]),s._v(" "),n("li",[n("code",[s._v("pop()")]),s._v("：删除数组的最后一项")]),s._v(" "),n("li",[n("code",[s._v("shift()")]),s._v("：删除数组的第一项")]),s._v(" "),n("li",[n("code",[s._v("unshift()")]),s._v("：向数组首位添加新元素")]),s._v(" "),n("li",[n("code",[s._v("slice()")]),s._v("：按照条件查找出其中的部分元素")]),s._v(" "),n("li",[n("code",[s._v("splice()")]),s._v("：对数组进行增删改")]),s._v(" "),n("li",[n("code",[s._v("fill()")]),s._v(": 方法能使用特定值填充数组中的一个或多个元素")]),s._v(" "),n("li",[n("code",[s._v("filter()")]),s._v(":“过滤”功能")]),s._v(" "),n("li",[n("code",[s._v("concat()")]),s._v("：用于连接两个或多个数组")]),s._v(" "),n("li",[n("code",[s._v("indexOf()")]),s._v("：检测当前值在数组中第一次出现的位置索引")]),s._v(" "),n("li",[n("code",[s._v("lastIndexOf()")]),s._v("：检测当前值在数组中最后一次出现的位置索引")]),s._v(" "),n("li",[n("code",[s._v("every()")]),s._v("：判断数组中每一项都是否满足条件")]),s._v(" "),n("li",[n("code",[s._v("some()")]),s._v("：判断数组中是否存在满足条件的项")]),s._v(" "),n("li",[n("code",[s._v("includes()")]),s._v("：判断一个数组是否包含一个指定的值")]),s._v(" "),n("li",[n("code",[s._v("sort()")]),s._v("：对数组的元素进行排序")]),s._v(" "),n("li",[n("code",[s._v("reverse()")]),s._v("：对数组进行倒序")]),s._v(" "),n("li",[n("code",[s._v("forEach()")]),s._v("：ES5 及以下循环遍历数组每一项")]),s._v(" "),n("li",[n("code",[s._v("map()")]),s._v("：ES6 循环遍历数组每一项")]),s._v(" "),n("li",[n("code",[s._v("copyWithin()")]),s._v(":用于从数组的指定位置拷贝元素到数组的另一个指定位置中")]),s._v(" "),n("li",[n("code",[s._v("find()")]),s._v(":返回匹配的值")]),s._v(" "),n("li",[n("code",[s._v("findIndex()")]),s._v(":返回匹配位置的索引")]),s._v(" "),n("li",[n("code",[s._v("toLocaleString()、toString()")]),s._v(":将数组转换为字符串")]),s._v(" "),n("li",[n("code",[s._v("flat()、flatMap()")]),s._v("：扁平化数组")]),s._v(" "),n("li",[n("code",[s._v("entries() 、keys() 、values()")]),s._v(":遍历数组")])]),s._v(" "),n("h4",{attrs:{id:"各个方法的基本功能详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#各个方法的基本功能详解"}},[s._v("#")]),s._v(" 各个方法的基本功能详解")]),s._v(" "),n("h6",{attrs:{id:"_1-join"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-join"}},[s._v("#")]),s._v(" 1.join()")]),s._v(" "),n("p",[n("code",[s._v("join()")]),s._v("方法用于把数组中的所有元素转换一个字符串。")]),s._v(" "),n("p",[s._v("元素是通过指定的分隔符进行分隔的。默认使用逗号作为分隔符")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var arr = [1,2,3];\nconsole.log(arr.join());   // 1,2,3\nconsole.log(arr.join("-"));   // 1-2-3\nconsole.log(arr);   // [1, 2, 3]（原数组不变）\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("通过"),n("strong",[s._v("join()方法可以实现重复字符串")]),s._v("，只需传入字符串以及重复的次数，就能返回重复后的字符串，函数如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function repeatString(str, n) {\n//一个长度为n+1的空数组用string去拼接成字符串,就成了n个string的重复\n return new Array(n + 1).join(str);\n}\nconsole.log(repeatString("abc", 3));   // abcabcabc\nconsole.log(repeatString("Hi", 5));   // HiHiHiHiHi\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h6",{attrs:{id:"_2-push-和-pop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-push-和-pop"}},[s._v("#")]),s._v(" 2.push()和 pop()")]),s._v(" "),n("p",[n("code",[s._v("push()")]),s._v(" 方法"),n("strong",[s._v("从数组末尾向数组添加元素")]),s._v("，可以添加一个或多个元素。")]),s._v(" "),n("p",[n("code",[s._v("pop()")]),s._v(" 方法用于"),n("strong",[s._v("删除数组的最后一个元素")]),s._v("并返回删除的元素。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var arr = ["Lily","lucy","Tom"];\nvar count = arr.push("Jack","Sean");\nconsole.log(count);  // 5\nconsole.log(arr);   // ["Lily", "lucy", "Tom", "Jack", "Sean"]\nvar item = arr.pop();\nconsole.log(item);   // Sean\nconsole.log(arr);   // ["Lily", "lucy", "Tom", "Jack"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h6",{attrs:{id:"_3-shift-和-unshift"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-shift-和-unshift"}},[s._v("#")]),s._v(" 3.shift() 和 unshift()")]),s._v(" "),n("p",[n("code",[s._v("shift()")]),s._v(" 方法用于"),n("strong",[s._v("把数组的第一个元素从其中删除")]),s._v("，并返回第一个元素的值。")]),s._v(" "),n("p",[n("code",[s._v("unshift()")]),s._v(" 方法可"),n("strong",[s._v("向数组的开头添加一个或更多元素")]),s._v("，并返回新的长度。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var arr = ["Lily","lucy","Tom"];\nvar count = arr.unshift("Jack","Sean");\nconsole.log(count);   // 5\nconsole.log(arr);   //["Jack", "Sean", "Lily", "lucy", "Tom"]\nvar item = arr.shift();\nconsole.log(item);   // Jack\nconsole.log(arr);   // ["Sean", "Lily", "lucy", "Tom"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h6",{attrs:{id:"_4-sort"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-sort"}},[s._v("#")]),s._v(" 4.sort()")]),s._v(" "),n("p",[s._v("sort() 方法用于对数组的元素进行排序。")]),s._v(" "),n("p",[s._v("排序顺序可以是字母或数字，并按升序或降序。")]),s._v(" "),n("p",[s._v("默认排序顺序为按字母升序。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var arr1 = ["a", "d", "c", "b"];\nconsole.log(arr1.sort());   // ["a", "b", "c", "d"]\narr2 = [13, 24, 51, 3];\nconsole.log(arr2.sort());   // [13, 24, 3, 51]\nconsole.log(arr2);   // [13, 24, 3, 51](元数组被改变)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("为了解决上述问题，sort()方法可以接收一个比较函数作为参数，以便我们指定哪个值位于哪个值的前面。")]),s._v(" "),n("p",[s._v("比较函数接收两个参数，如果第一个参数应该位于第二个之前则返回一个负数，如果两个参数相等则返回 0，如果第一个参数应该位于第二个之后则返回一个正数。以下就是一个简单的比较函数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function compare(value1, value2) {\n    if (value1 < value2) {\n     return -1;\n    } else if (value1 > value2) {\n     return 1;\n    } else {\n     return 0;\n    }\n}\narr2 = [13, 24, 51, 3];\nconsole.log(arr2.sort(compare));   // [3, 13, 24, 51]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("如果需要通过比较函数产生降序排序的结果，只要交换比较函数返回的值即可：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function compare(value1, value2) {\n    if (value1 < value2) {\n     return 1;\n    } else if (value1 > value2) {\n     return -1;\n    } else {\n     return 0;\n    }\n}\narr2 = [13, 24, 51, 3];\nconsole.log(arr2.sort(compare));   // [51, 24, 13, 3]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h6",{attrs:{id:"_5-reverse"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-reverse"}},[s._v("#")]),s._v(" 5.reverse()")]),s._v(" "),n("p",[s._v("reverse() 方法用于颠倒数组中元素的顺序。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr = [13, 24, 51, 3];\nconsole.log(arr.reverse());   //[3, 51, 24, 13]\nconsole.log(arr);   //[3, 51, 24, 13](原数组改变)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h6",{attrs:{id:"_6-concat"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-concat"}},[s._v("#")]),s._v(" 6.concat()")]),s._v(" "),n("p",[s._v("concat() 方法用于连接两个或多个数组。")]),s._v(" "),n("p",[s._v("该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr = [1,3,5,7];\nvar arrCopy = arr.concat(9,[11,13]);\nconsole.log(arrCopy);   //[1, 3, 5, 7, 9, 11, 13]\nconsole.log(arr);   // [1, 3, 5, 7](原数组未被修改)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("从上面测试结果可以发现：传入的不是数组，则直接把参数添加到数组后面，如果传入的是数组，则将数组中的各个项添加到数组中。但是如果传入的是一个二维数组呢？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arrCopy2 = arr.concat([9,[11,13]]);\nconsole.log(arrCopy2);   //[1, 3, 5, 7, 9, Array[2]]\nconsole.log(arrCopy2[5]);   //[11, 13]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h6",{attrs:{id:"_7-slice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-slice"}},[s._v("#")]),s._v(" 7.slice()")]),s._v(" "),n("p",[s._v("slice()：返回从原数组中指定开始下标到结束下标之间的项组成的新数组。")]),s._v(" "),n("p",[s._v("slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。")]),s._v(" "),n("p",[s._v("在"),n("strong",[s._v("只有一个参数")]),s._v("的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。")]),s._v(" "),n("p",[s._v("如果"),n("strong",[s._v("有两个参数")]),s._v("，该方法返回起始和结束位置之间的项，但不包括结束位置的项。")]),s._v(" "),n("p",[n("strong",[s._v("当出现负数时，将负数加上数组长度的值（6）来替换该位置的数")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr = [1,3,5,7,9,11];\nvar arrCopy = arr.slice(1);\nvar arrCopy2 = arr.slice(1,4);\nvar arrCopy3 = arr.slice(1,-2);//相当于arr.slice(1,4)\nvar arrCopy4 = arr.slice(-4,-1);//相当于arr.slice(2,5)\nconsole.log(arr);   //[1, 3, 5, 7, 9, 11](原数组没变)\nconsole.log(arrCopy);   //[3, 5, 7, 9, 11]\nconsole.log(arrCopy2);   //[3, 5, 7]\nconsole.log(arrCopy3);   //[3, 5, 7]\nconsole.log(arrCopy4);   //[5, 7, 9]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h6",{attrs:{id:"_8-splice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-splice"}},[s._v("#")]),s._v(" 8.splice()")]),s._v(" "),n("p",[n("code",[s._v("splice()")]),s._v("：很强大的数组方法，它有很多种用法，可以"),n("strong",[s._v("实现删除、插入和替换")]),s._v("。")]),s._v(" "),n("p",[s._v("######## 1.删除元素,并返回删除的元素")]),s._v(" "),n("p",[s._v("可以删除任意数量的项，只需指定 2 个参数：要删除的第一项的位置和要删除的项数。例如， splice(0,2)会删除数组中的前两项。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr = [1,3,5,7,9,11];\nvar arrRemoved = arr.splice(0,2);\nconsole.log(arr);   //[5, 7, 9, 11]\nconsole.log(arrRemoved);   //[1, 3]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("######## 2.向指定索引处添加元素")]),s._v(" "),n("p",[s._v("可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项。例如，splice(2,0,4,6)会从当前数组的位置 2 开始插入 4 和 6。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var array1 = [22, 3, 31, 12];\narray1.splice(1, 0, 12, 35);  //[]\nconsole.log(array1); // [22, 12, 35, 3, 31, 12]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("######## 3.替换指定索引位置的元素")]),s._v(" "),n("p",[s._v("可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,4,6)会删除当前数组位置 2 的项，然后再从位置 2 开始插入 4 和 6。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const array1 = [22, 3, 31, 12];\narray1.splice(1, 1, 8);   //[3]\nconsole.log(array1);  // [22, 8, 31, 12]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h6",{attrs:{id:"_9-indexof-和-lastindexof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-indexof-和-lastindexof"}},[s._v("#")]),s._v(" 9.indexOf()和 lastIndexOf()")]),s._v(" "),n("p",[n("strong",[s._v("接收两个参数")]),s._v("：要查找的项和（可选的）表示查找起点位置的索引。")]),s._v(" "),n("p",[n("code",[s._v("indexOf()")]),s._v("：从数组的开头（位置 0）开始向后查找。")]),s._v(" "),n("p",[n("code",[s._v("lastIndexOf")]),s._v("：从数组的末尾开始向前查找。")]),s._v(" "),n("p",[s._v("这两个方法都返回要查找的项在数组中的位置，或者在"),n("strong",[s._v("没找到的情况下返回-1")]),s._v("。在比较第一个参数与数组中的每一项时，会"),n("strong",[s._v("使用全等操作符")]),s._v("。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var arr = [1,3,5,7,7,5,3,1];\nconsole.log(arr.indexOf(5));   //2\nconsole.log(arr.lastIndexOf(5));   //5\nconsole.log(arr.indexOf(5,2));   //2\nconsole.log(arr.lastIndexOf(5,4));   //2\nconsole.log(arr.indexOf("5"));   //-1\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h6",{attrs:{id:"_10-foreach"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-foreach"}},[s._v("#")]),s._v(" 10.forEach()")]),s._v(" "),n("p",[s._v("forEach()：对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是 function 类型，默认有传，。")]),s._v(" "),n("p",[n("strong",[s._v("参数分别为")]),s._v("：遍历的数组内容；第对应的数组索引，数组本身")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr = [11, 22, 33, 44, 55];\narr.forEach(function(x, index, a){\n console.log(x + '|' + index + '|' + (a === arr));\n});\n输出为：\n 11|0|true\n 22|1|true\n 33|2|true\n 44|3|true\n 55|4|true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h6",{attrs:{id:"_11-map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-map"}},[s._v("#")]),s._v(" 11.map()")]),s._v(" "),n("p",[n("code",[s._v("map()")]),s._v(" 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。")]),s._v(" "),n("p",[n("code",[s._v("map()")]),s._v(" 方法按照原始数组元素顺序依次处理元素。")]),s._v(" "),n("p",[s._v("该方法不会改变原数组")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.map(function(item){\n return item*item;\n});\nconsole.log(arr2);  //[1, 4, 9, 16, 25]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h6",{attrs:{id:"_12-filter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-filter"}},[s._v("#")]),s._v(" 12.filter()")]),s._v(" "),n("p",[s._v("filter()：“过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arr2 = arr.filter(function(x, index) {\n return index % 3 === 0 || x >= 8;\n});\nconsole.log(arr2);  //[1, 4, 7, 8, 9, 10]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h6",{attrs:{id:"_13-fill-es6-新增"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-fill-es6-新增"}},[s._v("#")]),s._v(" 13.fill() es6 新增")]),s._v(" "),n("p",[s._v("fill()方法能使用特定值填充数组中的一个或多个元素。当只是用一个参数时，该方法会用该参数的值填充整个数组。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1, 2, 3, 'cc', 5];\narr.fill(1);\nconsole.log(arr);//[1,1,1,1,1];\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("如果不想改变数组中的所有元素，而只是想改变其中一部分，那么可以使用可选的起始位置参数与结束位置参数（不包括结束位置的那个元素）")]),s._v(" "),n("p",[n("strong",[s._v("3 个参数：")]),s._v(" 填充数值，起始位置参数，结束位置参数（不包括结束位置的那个元素）")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1, 2, 3, 'arr', 5];\narr.fill(1, 2);\nconsole.log(arr);//[1,2,1,1,1]\narr.fill(0, 1, 3);\nconsole.log(arr);//[1,0,0,1,1];\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h6",{attrs:{id:"_14-every"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-every"}},[s._v("#")]),s._v(" 14.every()")]),s._v(" "),n("p",[s._v("every()：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回 true。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.every(function(x) {\n return x < 10;\n});\nconsole.log(arr2);  //true\nvar arr3 = arr.every(function(x) {\n return x < 3;\n});\nconsole.log(arr3);  // false\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h6",{attrs:{id:"_15-some"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-some"}},[s._v("#")]),s._v(" 15.some()")]),s._v(" "),n("p",[s._v("some()：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回 true。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.some(function(x) {\n return x < 3;\n});\nconsole.log(arr2);  //true\nvar arr3 = arr.some(function(x) {\n return x < 1;\n});\nconsole.log(arr3);  // false\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h6",{attrs:{id:"_16-includes-es7-新增"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-includes-es7-新增"}},[s._v("#")]),s._v(" 16.includes() es7 新增")]),s._v(" "),n("p",[s._v("includes() 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则 false。")]),s._v(" "),n("p",[n("strong",[s._v("参数有两个")]),s._v("，其中第一个是（必填）需要查找的元素值，第二个是（可选）开始查找元素的位置")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const array1 = [22, 3, 31, 12, 'arr'];\nconst includes = array1.includes(31);\nconsole.log(includes); // true\nconst includes1 = array1.includes(31, 3); // 从索引3开始查找31是否存在\nconsole.log(includes1); // false\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("需要注意的是：includes"),n("strong",[s._v("使用===运算符")]),s._v("来进行值比较，仅有一个例外："),n("strong",[s._v("NaN 被认为与自身相等")]),s._v("。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let values = [1, NaN, 2];\nconsole.log(values.indexOf(NaN));//-1\nconsole.log(values.includes(NaN));//true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h6",{attrs:{id:"_17-reduce-和-reduceright"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17-reduce-和-reduceright"}},[s._v("#")]),s._v(" 17.reduce()和 reduceRight()")]),s._v(" "),n("p",[s._v("这两个方法都会实现迭代数组的所有项(即累加器)，然后构建一个最终返回的值。")]),s._v(" "),n("p",[n("code",[s._v("reduce()")]),s._v("方法从数组的第一项开始，逐个遍历到最后。")]),s._v(" "),n("p",[n("code",[s._v("reduceRight()")]),s._v("则从数组的最后一项开始，向前遍历到第一项。")]),s._v(" "),n("p",[n("strong",[s._v("4 个参数")]),s._v("：前一个值、当前值、项的索引和数组对象")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var values = [1,2,3,4,5];\nvar sum = values.reduceRight(function(prev, cur, index, array){\nreturn prev + cur;\n},10);   //数组一开始加了一个初始值10,可以不设默认0\nconsole.log(sum);  //25\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h6",{attrs:{id:"_18-tolocalestring-和-tostring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-tolocalestring-和-tostring"}},[s._v("#")]),s._v(" 18.toLocaleString() 和 toString()")]),s._v(" "),n("p",[s._v("将数组转换为字符串")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const array1 = [22, 3, 31, 12];\nconst str = array1.toLocaleString();\nconst str1 = array1.toString();\nconsole.log(str); // 22,3,31,12\nconsole.log(str1); // 22,3,31,12\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h6",{attrs:{id:"_19-find-和-findindex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_19-find-和-findindex"}},[s._v("#")]),s._v(" 19. find()和 findIndex()")]),s._v(" "),n("p",[s._v("find()与 findIndex()方法均接受两个参数：一个回调函数，一个可选值用于指定回调函数内部的 this。")]),s._v(" "),n("p",[s._v("该回调函数可接受三个参数：数组的某个元素，该元素对应的索引位置，以及该数组本身。")]),s._v(" "),n("p",[s._v("该回调函数应当在给定的元素满足你定义的条件时返回 true，而 find()和 findIndex()方法均会在回调函数"),n("strong",[s._v("第一次返回 true 时停止查找")]),s._v("。")]),s._v(" "),n("p",[n("strong",[s._v("二者的区别是")]),s._v("：find()方法返回匹配的值，而 findIndex()返回匹配位置的索引。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1, 2, 3, 'arr', 5, 1, 9];\nconsole.log(arr.find((value, keys, arr) => {\n    return value > 2;\n})); // 3 返回匹配的值\nconsole.log(arr.findIndex((value, keys, arr) => {\n    return value > 2;\n})); // 2 返回匹配位置的索引\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h6",{attrs:{id:"_20-copywithin-es6-新增"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_20-copywithin-es6-新增"}},[s._v("#")]),s._v(" 20.copyWithin() [es6 新增]")]),s._v(" "),n("p",[s._v("copyWithin() 方法用于从数组的指定位置拷贝元素到数组的另一个指定位置中。")]),s._v(" "),n("p",[s._v("该方法会改变现有数组")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//将数组的前两个元素复制到数组的最后两个位置\nlet arr = [1, 2, 3, 'arr', 5];\narr.copyWithin(3, 0);\nconsole.log(arr);//[1,2,3,1,2]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("默认情况下，copyWithin()方法总是会一直复制到数组末尾，不过你还可以提供一个可选参数来限制到底有多少元素会被覆盖。这第三个参数指定了复制停止的位置（不包含该位置本身）。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1, 2, 3, 'arr', 5, 9, 17];\n//从索引3的位置开始粘贴\n//从索引0的位置开始复制\n//遇到索引3时停止复制\narr.copyWithin(3, 0, 3);\nconsole.log(arr);//[1,2,3,1,2,3,17]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h6",{attrs:{id:"_21-flat-和-flatmap-es6-新增"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_21-flat-和-flatmap-es6-新增"}},[s._v("#")]),s._v(" 21.flat() 和 flatMap() es6 新增")]),s._v(" "),n("p",[s._v("flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。")]),s._v(" "),n("p",[n("strong",[s._v("该方法返回一个新数组，对原数据没有影响。")])]),s._v(" "),n("p",[n("strong",[s._v("参数：")]),s._v(" 指定要提取嵌套数组的结构深度，默认值为 1。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const arr1 = [0, 1, 2, [3, 4]];\nconsole.log(arr1.flat());\n// expected output: [0, 1, 2, 3, 4]\nconst arr2 = [0, 1, 2, [[[3, 4]]]];\nconsole.log(arr2.flat(2));\n// expected output: [0, 1, 2, [3, 4]]\n//使用 Infinity，可展开任意深度的嵌套数组\nvar arr4 = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]];\narr4.flat(Infinity);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// 扁平化数组空项,如果原数组有空位，flat()方法会跳过空位\nvar arr4 = [1, 2, , 4, 5];\narr4.flat();\n// [1, 2, 4, 5]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[n("code",[s._v("flatMap()")]),s._v("方法对原数组的每个成员执行一个函数，相当于执行Array.prototype.map(),然后"),n("strong",[s._v("对返回值组成的数组执行flat()方法")]),s._v("。")]),s._v(" "),n("p",[s._v("该方法返回一个新数组，不改变原数组。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 相当于 [[2, 4], [3, 6], [4, 8]].flat()\n[2, 3, 4].flatMap((x) => [x, x * 2])\n// [2, 4, 3, 6, 4, 8]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h6",{attrs:{id:"_22-entries-keys-和-values-【es6】"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_22-entries-keys-和-values-【es6】"}},[s._v("#")]),s._v(" 22. entries(),keys() 和 values() 【ES6】")]),s._v(" "),n("p",[s._v("entries()，keys()和values() —— 用于遍历数组。它们都返回一个遍历器对象，可以用for...of循环进行遍历")]),s._v(" "),n("p",[s._v("区别是"),n("strong",[s._v("keys()是对键名的遍历")]),s._v("、"),n("strong",[s._v("values()是对键值的遍历")]),s._v("，"),n("strong",[s._v("entries()是对键值对的遍历")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("for (let index of ['a', 'b'].keys()) {  \nconsole.log(index);  \n}  \n// 0 \n// 1 \nfor (let elem of ['a', 'b'].values()) {  \nconsole.log(elem);  \n}  \n// 'a' \n// 'b' \nfor (let [index, elem] of ['a', 'b'].entries()) {  \nconsole.log(index, elem);  \n}  \n// 0 \"a\" \n// 1 \"b\" \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("如果不使用for...of循环，可以手动调用遍历器对象的"),n("strong",[s._v("next方法")]),s._v("，进行遍历。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let letter = ['a', 'b', 'c'];  \nlet entries = letter.entries();  \nconsole.log(entries.next().value); // [0, 'a'] \nconsole.log(entries.next().value); // [1, 'b'] \nconsole.log(entries.next().value); // [2, 'c'] \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("作者：Yushia")]),s._v(" "),n("p",[s._v("链接：https://juejin.cn/post/6907109642917117965")])])}),[],!1,null,null,null);a.default=e.exports}}]);