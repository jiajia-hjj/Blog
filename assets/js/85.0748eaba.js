(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{707:function(t,v,a){"use strict";a.r(v);var r=a(18),_=Object(r.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"javascript属于什么类型的语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript属于什么类型的语言"}},[t._v("#")]),t._v(" JavaScript属于什么类型的语言?")]),t._v(" "),a("p",[t._v("基本概念")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("动态类型语言")]),t._v("：在运行期进行类型检查的语言，也就是在编写代码的时候"),a("strong",[t._v("可以不指定变量")]),t._v("的数据类型，比如Python和Ruby")]),t._v(" "),a("li",[a("strong",[t._v("静态类型语言")]),t._v("：在编译期进行类型检查的语言，也就是变量在"),a("strong",[t._v("使用前要声明变量")]),t._v("的数据类型，这样的好处是把类型检查放在编译期，提前检查可能出现的类型错误，典型代表C/C++和Java")]),t._v(" "),a("li",[a("strong",[t._v("强类型语言")]),t._v("：一个变量不经过强制转换，它永远是这个数据类型，不允许隐式的类型转换。举个例子：如果你定义了一个double类型变量a,不经过强制类型转换那么程序int b = a无法通过编译。典型代表是Java。")]),t._v(" "),a("li",[a("strong",[t._v("弱类型语言")]),t._v("：支持隐式类型转换的语言，典型代表C/C++。")])]),t._v(" "),a("p",[a("code",[t._v("JavaScript")]),t._v(" 属于 "),a("strong",[t._v("动态语言")]),t._v("，"),a("strong",[t._v("弱类型语言")]),t._v("。")])])}),[],!1,null,null,null);v.default=_.exports}}]);