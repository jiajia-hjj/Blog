(window.webpackJsonp=window.webpackJsonp||[]).push([[185],{815:function(t,s,a){"use strict";a.r(s);var n=a(18),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、什么是csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是csrf"}},[t._v("#")]),t._v(" 一、什么是CSRF")]),t._v(" "),a("p",[t._v("CSRF，跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。")]),t._v(" "),a("p",[t._v("一个典型的CSRF攻击有着如下的流程：")]),t._v(" "),a("ul",[a("li",[t._v("受害者登录a.com，并保留了登录凭证（Cookie）。")]),t._v(" "),a("li",[t._v("攻击者引诱受害者访问了b.com。")]),t._v(" "),a("li",[t._v("b.com向 a.com发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的cookie")]),t._v(" "),a("li",[t._v("a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。")]),t._v(" "),a("li",[t._v("a.com以受害者的名义执行了act=xx。")]),t._v(" "),a("li",[t._v("攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。")])]),t._v(" "),a("h2",{attrs:{id:"二、攻击类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、攻击类型"}},[t._v("#")]),t._v(" 二、攻击类型")]),t._v(" "),a("p",[a("strong",[t._v("1、GET类型的CSRF")])]),t._v(" "),a("ul",[a("li",[t._v("GET类型的CSRF利用非常简单，只需要一个HTTP请求，一般会这样利用：")])]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://bank.example/withdraw?amount=10000&for=hacker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("在受害者访问含有这个img的页面后，浏览器会自动向"),a("code",[t._v("http://bank.example/withdraw?account=xiaoming&amount=10000&for=hacker")]),t._v("发出一次HTTP请求。bank.example就会收到包含受害者登录信息的一次跨域请求。")])]),t._v(" "),a("p",[a("strong",[t._v("2、POST类型的CSRF")])]),t._v(" "),a("ul",[a("li",[t._v("这种类型的CSRF利用起来通常使用的是一个自动提交的表单，如：")])]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("form")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("action")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://bank.example/withdraw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v("POST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("account"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("xiaoming"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("amount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("10000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("for"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hacker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("form")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("forms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("ul",[a("li",[t._v("访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作。")]),t._v(" "),a("li",[t._v("POST类型的攻击通常比GET要求更加严格一点，但仍并不复杂。任何个人网站、博客，被黑客上传页面的网站都有可能是发起攻击的来源，后端接口不能将安全寄托在仅允许POST上面。")])]),t._v(" "),a("p",[a("strong",[t._v("3、链接类型的CSRF")])]),t._v(" "),a("ul",[a("li",[t._v("链接类型的CSRF并不常见，比起其他两种用户打开页面就中招的情况，这种需要用户点击链接才会触发。")]),t._v(" "),a("li",[t._v("这种类型通常是在论坛中发布的图片中嵌入恶意链接，或者以广告的形式诱导用户中招，攻击者通常会以比较夸张的词语诱骗用户点击，例如：")])]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://test.com/csrf/withdraw.php?amount=1000&for=hacker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("taget")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("_blank"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    重磅消息！！\n "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[t._v("由于之前用户登录了信任的网站A，并且保存登录状态，只要用户主动访问上面的这个PHP页面，则表示攻击成功")])]),t._v(" "),a("h2",{attrs:{id:"三、csrf的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、csrf的特点"}},[t._v("#")]),t._v(" 三、CSRF的特点")]),t._v(" "),a("ul",[a("li",[t._v("攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。")]),t._v(" "),a("li",[t._v("攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。")]),t._v(" "),a("li",[t._v("整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。")]),t._v(" "),a("li",[t._v("跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。")])]),t._v(" "),a("p",[t._v("CSRF通常是跨域的，因为外域通常更容易被攻击者掌控。但是如果本域下有容易被利用的功能，比如可以发图和链接的论坛和评论区，攻击可以直接在本域下进行，而且这种攻击更加危险。")]),t._v(" "),a("h2",{attrs:{id:"四、防护策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、防护策略"}},[t._v("#")]),t._v(" 四、防护策略")]),t._v(" "),a("p",[t._v("CSRF通常从第三方网站发起，被攻击的网站无法防止攻击发生，只能通过增强自己网站针对CSRF的防护能力来提升安全性。")]),t._v(" "),a("p",[a("strong",[t._v("上文中讲了CSRF的两个特点：")])]),t._v(" "),a("ul",[a("li",[t._v("CSRF（通常）发生在第三方域名。")]),t._v(" "),a("li",[t._v("CSRF攻击者不能获取到Cookie等信息，只是使用。")])]),t._v(" "),a("p",[a("strong",[t._v("针对这两点，我们可以专门制定防护策略，如下：")])]),t._v(" "),a("ul",[a("li",[t._v("阻止不明外域的访问\n"),a("ul",[a("li",[t._v("同源检测")]),t._v(" "),a("li",[t._v("Samesite Cookie")])])]),t._v(" "),a("li",[t._v("提交时要求附加本域才能获取的信息\n"),a("ul",[a("li",[t._v("CSRF Token")]),t._v(" "),a("li",[t._v("双重Cookie验证")])])])]),t._v(" "),a("h3",{attrs:{id:"_4-1-同源检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-同源检测"}},[t._v("#")]),t._v(" 4.1.同源检测")]),t._v(" "),a("p",[t._v("既然CSRF大多来自第三方网站，那么我们就直接禁止外域（或者不受信任的域名）对我们发起请求。")]),t._v(" "),a("p",[a("strong",[t._v("如何判断请求是否来自外域呢？")])]),t._v(" "),a("p",[t._v("在HTTP协议中，每一个异步请求都会携带两个Header，用于标记来源域名：")]),t._v(" "),a("ul",[a("li",[t._v("Origin Header ：表明了请求来自于哪个站点")]),t._v(" "),a("li",[t._v("Referer Header：  当前请求页面的来源页面的地址")])]),t._v(" "),a("p",[t._v("这两个Header在浏览器发起请求时，大多数情况会自动带上，并且不能由前端自定义内容。 服务器可以通过解析这两个Header中的域名，确定请求的来源域。")]),t._v(" "),a("p",[a("strong",[t._v("1、使用Origin Header确定来源域名")])]),t._v(" "),a("p",[t._v("在部分与CSRF有关的请求中，请求的Header中会携带Origin字段。字段内包含请求的域名（不包含path及query）。")]),t._v(" "),a("p",[t._v("如果Origin存在，那么直接使用Origin中的字段确认来源域名就可以。")]),t._v(" "),a("p",[t._v("但是Origin在以下两种情况下并不存在：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("IE11同源策略")])]),t._v(" "),a("li",[a("strong",[t._v("302重定向")])])]),t._v(" "),a("p",[a("strong",[t._v("2、使用Referer Header确定来源域名")])]),t._v(" "),a("ul",[a("li",[t._v("Referer，记录了该HTTP请求的来源地址。")]),t._v(" "),a("li",[t._v("对于Ajax请求，图片和script等资源请求，Referer为发起请求的页面地址。")]),t._v(" "),a("li",[t._v("对于页面跳转，Referer为打开页面历史记录的前一个页面地址。因此我们使用Referer中链接的Origin部分可以得知请求的来源域名。")]),t._v(" "),a("li",[t._v("这种方法并非万无一失，Referer的值是由浏览器提供的，使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不是很安全。在部分情况下，攻击者可以隐藏，甚至修改自己请求的Referer。")]),t._v(" "),a("li",[t._v("新的Referrer规定了五种策略：\n"),a("ul",[a("li",[t._v("No Referrer：任何情况下都不发送Referrer信息")]),t._v(" "),a("li",[t._v("No Referrer When Downgrade：仅当协议降级（如HTTPS页面引入HTTP资源）时不发送Referrer信息。是大部分浏览器默认策略。")]),t._v(" "),a("li",[t._v("Origin Only：发送只包含host部分的referrer.")]),t._v(" "),a("li",[t._v("Origin When Cross-origin：仅在发生跨域访问时发送只包含host的Referer，同域下还是完整的。与Origin Only的区别是多判断了是否Cross-origin。协议、域名和端口都一致，浏览器才认为是同域。")]),t._v(" "),a("li",[t._v("Unsafe URL：全部都发送Referrer信息。最宽松最不安全的策略。")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("策略名称")]),t._v(" "),a("th",[t._v("属性值（新）")]),t._v(" "),a("th",[t._v("属性值（旧）")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("No Referrer")]),t._v(" "),a("td",[t._v("no-Referrer")]),t._v(" "),a("td",[t._v("never")])]),t._v(" "),a("tr",[a("td",[t._v("No Referrer When Downgrade")]),t._v(" "),a("td",[t._v("no-Referrer-when-downgrade")]),t._v(" "),a("td",[t._v("default")])]),t._v(" "),a("tr",[a("td",[t._v("Origin Only")]),t._v(" "),a("td",[t._v("(same or strict) origin")]),t._v(" "),a("td",[t._v("origin")])]),t._v(" "),a("tr",[a("td",[t._v("Origin When Cross Origin")]),t._v(" "),a("td",[t._v("(strict) origin-when-crossorigin")]),t._v(" "),a("td",[t._v("-")])]),t._v(" "),a("tr",[a("td",[t._v("Unsafe URL")]),t._v(" "),a("td",[t._v("unsafe-url")]),t._v(" "),a("td",[t._v("always")])])])]),t._v(" "),a("ul",[a("li",[t._v("根据上面的表格把"),a("code",[t._v("Referrer Policy")]),t._v("的策略设置成"),a("code",[t._v("same-origin")]),t._v("，对于同源的链接和引用，会发送Referer，referer值为Host不带Path；跨域访问则不携带Referer。")]),t._v(" "),a("li",[t._v("例如："),a("code",[t._v("aaa.com")]),t._v("引用"),a("code",[t._v("bbb.com")]),t._v("的资源，不会发送Referer。")])]),t._v(" "),a("p",[a("strong",[t._v("设置Referrer Policy的方法有三种：")])]),t._v(" "),a("ul",[a("li",[t._v("在CSP设置， 指令和指令值之间以空格分割，多个指令之间用英文分号分割。")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Content-Security-Policy:referrer no-referrer|no-referrer-when-downgrade|origin|origin-when-cross-origin|unsafe-url;\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("页面头部增加meta标签")])]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("referrer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("no-referrer|no-referrer-when-downgrade|origin|origin-when-crossorigin|unsafe-url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("a标签增加referrerpolicy 属性")])]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("https://www.w3school.com.cn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("referrerpolicy")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("origin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("xxx"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("可以知道一个问题：攻击者可以在自己的"),a("strong",[t._v("请求中隐藏Referer")]),t._v("。如果攻击者将自己的请求这样填写：")]),t._v(" "),a("div",{staticClass:"language-html line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://bank.example/withdraw?amount=10000&for=hacker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("referrerpolicy")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("no-referrer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("那么这个请求发起的攻击将不携带Referer。")])]),t._v(" "),a("p",[a("strong",[t._v("另外在以下情况下Referer没有或者不可信：")])]),t._v(" "),a("ul",[a("li",[t._v("IE6、7下使用window.location.href=url进行界面的跳转，会丢失Referer。")]),t._v(" "),a("li",[t._v("IE6、7下使用window.open，也会缺失Referer。")]),t._v(" "),a("li",[t._v("HTTPS页面跳转到HTTP页面，所有浏览器Referer都丢失。")]),t._v(" "),a("li",[t._v("点击Flash上到达另外一个网站的时候，Referer的情况就比较杂乱，不太可信")])]),t._v(" "),a("p",[a("strong",[t._v("3、无法确认来源域名情况")])]),t._v(" "),a("ul",[a("li",[t._v("如果Origin和Referer都不存在，建议直接进行阻止")]),t._v(" "),a("li",[t._v("特别是如果您没有使用随机CSRF Token（参考下方）作为第二次检查。")])]),t._v(" "),a("h3",{attrs:{id:"_4-2-csrf-token"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-csrf-token"}},[t._v("#")]),t._v(" 4.2.CSRF Token")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("攻击者无法直接窃取到用户的信息（Cookie，Header，网站内容等），仅仅是冒用Cookie中的信息。")])])]),t._v(" "),a("li",[a("p",[t._v("而CSRF攻击之所以能够成功，是因为服务器误把攻击者发送的请求当成了用户自己的请求。那么我们可以要求所有的用户请求都携带一个CSRF攻击者无法获取到的Token。")])]),t._v(" "),a("li",[a("p",[t._v("服务器通过校验请求是否携带正确的Token，来把正常的请求和攻击的请求区分开，也可以防范CSRF的攻击。")])])]),t._v(" "),a("p",[a("strong",[t._v("CSRF Token的防护策略分为三个步骤：")])]),t._v(" "),a("p",[a("strong",[t._v("1、将CSRF Token输出到页面中")])]),t._v(" "),a("ul",[a("li",[t._v("首先，用户打开页面的时候，服务器需要给这个用户生成一个Token，该Token通过加密算法对数据进行加密，一般Token都包括随机字符串和时间戳的组合，显然在提交时Token不能再放在Cookie中了，否则又会被攻击者冒用。")]),t._v(" "),a("li",[t._v("因此，为了安全起见Token最好还是存在服务器的Session中")]),t._v(" "),a("li",[t._v("之后在每次页面加载时，使用JS遍历整个DOM树，对于DOM中所有的a和form标签后加入Token。")]),t._v(" "),a("li",[t._v("这样可以解决大部分的请求，但是对于在页面加载之后动态生成的HTML代码，这种方法就没有作用，还需要程序员在编码时手动添加Token。")])]),t._v(" "),a("p",[a("strong",[t._v("2、页面提交的请求携带这个Token")])]),t._v(" "),a("ul",[a("li",[t._v("对于GET请求，Token将附在请求地址之后，这样URL 就变成 "),a("a",{attrs:{href:"https://link.juejin.cn?target=http%3A%2F%2Furl%3Fcsrftoken%3Dtokenvalue%E3%80%82",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://url?csrftoken=tokenvalue。"),a("OutboundLink")],1),t._v(" 而对于 POST 请求来说，要在 form 的最后加上：")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" <input type=”hidden” name=”csrftoken” value=”tokenvalue”/>\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("这样，就把Token以参数的形式加入请求了。")])]),t._v(" "),a("p",[a("strong",[t._v("3、服务器验证Token是否正确")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("当用户从客户端得到了Token，再次提交给服务器的时候，服务器需要判断Token的有效性，验证过程是先解密Token，对比加密字符串以及时间戳，如果加密字符串一致且时间未过期，那么这个Token就是有效的。")])]),t._v(" "),a("li",[a("p",[t._v("这种方法要比之前检查Referer或者Origin要安全一些，Token可以在产生并放于Session之中，然后在每次请求时把Token从Session中拿出，与请求中的Token进行比对，但这种方法的比较麻烦的在于如何把Token以参数的形式加入请求。 下面将以Java为例，介绍一些CSRF Token的服务端校验逻辑，代码如下：")])])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),t._v(" req "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpServletRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpSession")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSession")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从 session 中得到 csrftoken 属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" sToken "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAttribute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("“csrftoken”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sToken "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 产生新的 token 放入 session 中")]),t._v("\n   sToken "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateToken")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAttribute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("“csrftoken”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("sToken"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doFilter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从 HTTP 头中取得 csrftoken ")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" xhrToken "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("“csrftoken”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从请求参数中取得 csrftoken ")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" pToken "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getParameter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("“csrftoken”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sToken "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" xhrToken "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" sToken"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("xhrToken"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n       chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doFilter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sToken "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" pToken "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" sToken"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pToken"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n       chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doFilter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n       request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRequestDispatcher")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("“error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("jsp”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forward")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br")])]),a("p",[t._v("这个Token的值必须是随机生成的，这样它就不会被攻击者猜到，考虑利用Java应用程序的java.security.SecureRandom类来生成足够长的随机标记，替代生成算法包括使用256位BASE64编码哈希，选择这种生成算法的开发人员必须确保在散列数据中使用随机性和唯一性来生成随机标识。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("通常，开发人员只需为当前会话生成一次Token。在初始生成此Token之后，该值将存储在会话中，并用于每个后续请求，直到会话过期。")])]),t._v(" "),a("li",[a("p",[t._v("当最终用户发出请求时，服务器端必须验证请求中Token的存在性和有效性，与会话中找到的Token相比较。")])]),t._v(" "),a("li",[a("p",[t._v("如果在请求中找不到Token，或者提供的值与会话中的值不匹配，则应中止请求，应重置Token并将事件记录为正在进行的潜在CSRF攻击。")])])]),t._v(" "),a("h3",{attrs:{id:"_4-3-分布式校验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-分布式校验"}},[t._v("#")]),t._v(" 4.3.分布式校验")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在大型网站中，使用Session存储CSRF Token会带来很大的压力。")])]),t._v(" "),a("li",[a("p",[t._v("访问单台服务器session是同一个。")])]),t._v(" "),a("li",[a("p",[t._v("但是现在的大型网站中，我们的服务器通常不止一台，可能是几十台甚至几百台之多，甚至多个机房都可能在不同的省份，用户发起的HTTP请求通常要经过像Ngnix之类的负载均衡器之后，再路由到具体的服务器上")])]),t._v(" "),a("li",[a("p",[t._v("由于Session默认存储在单机服务器内存中，因此在分布式环境下同一个用户发送的多次HTTP请求可能会先后落到不同的服务器上，导致后面发起的HTTP请求无法拿到之前的HTTP请求存储在服务器中的Session数据，从而使得Session机制在分布式环境下失效，因此在分布式集群中CSRF Token需要存储在Redis之类的公共存储空间。")])]),t._v(" "),a("li",[a("p",[t._v("由于使用Session存储，读取和验证CSRF Token会引起比较大的复杂度和性能问题，目前很多网站采用Encrypted Token Pattern方式。这种方法的Token是一个计算出来的结果，而非随机生成的字符串。这样在校验时无需再去读取存储的Token，只用再次计算一次即可。")])]),t._v(" "),a("li",[a("p",[t._v("这种Token的值通常是使用UserID、时间戳和随机数，通过加密的方法生成。这样既可以保证分布式服务的Token一致，又能保证Token不容易被破解。")])]),t._v(" "),a("li",[a("p",[t._v("在token解密成功之后，服务器可以访问解析值，Token中包含的UserID和时间戳将会被拿来被验证有效性，将UserID与当前登录的UserID进行比较，并将时间戳与当前时间进行比较。")])])]),t._v(" "),a("p",[a("strong",[t._v("总结")])]),t._v(" "),a("ul",[a("li",[t._v("Token是一个比较有效的CSRF防护方法，只要页面没有XSS漏洞泄露Token，那么接口的CSRF攻击就无法成功。")]),t._v(" "),a("li",[t._v("但是此方法的实现比较复杂，需要给每一个页面都写入Token（前端无法使用纯静态页面），每一个Form及Ajax请求都携带这个Token，后端对每一个接口都进行校验，并保证页面Token及请求Token一致。这就使得这个防护策略不能在通用的拦截上统一拦截处理，而需要每一个页面和接口都添加对应的输出和校验。这种方法工作量巨大，且有可能遗漏。")])]),t._v(" "),a("blockquote",[a("p",[t._v("验证码和密码其实也可以起到CSRF Token的作用，而且更安全。(如:银行等网站会要求已经登录的用户在转账时再次输入密码)")])]),t._v(" "),a("h3",{attrs:{id:"_4-4-双重cookie验证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-双重cookie验证"}},[t._v("#")]),t._v(" 4.4.双重Cookie验证")]),t._v(" "),a("p",[t._v("在会话中存储CSRF Token比较繁琐，而且不能在通用的拦截上统一处理所有的接口。")]),t._v(" "),a("p",[t._v("那么另一种防御措施是使用双重提交Cookie。利用CSRF攻击不能获取到用户Cookie的特点，我们可以要求Ajax和表单请求携带一个Cookie中的值。")]),t._v(" "),a("p",[a("strong",[t._v("双重Cookie采用以下流程：")])]),t._v(" "),a("ul",[a("li",[t._v("在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串（例如"),a("code",[t._v("csrfcookie=v8g9e4ksfhw")]),t._v("）。")]),t._v(" "),a("li",[t._v("在前端向后端发起请求时，取出Cookie，并添加到URL的参数中（接上例"),a("code",[t._v("POST https://www.a.com/comment?csrfcookie=v8g9e4ksfhw")]),t._v("）。")]),t._v(" "),a("li",[t._v("后端接口验证Cookie中的字段与URL参数中的字段是否一致，不一致则拒绝。")])]),t._v(" "),a("p",[t._v("此方法相对于CSRF Token就简单了许多。可以直接通过前后端拦截的的方法自动化实现。后端校验也更加方便，只需进行请求中字段的对比，而不需要再进行查询和存储Token。")]),t._v(" "),a("p",[t._v("当然，此方法并没有大规模应用，其在大型网站上的安全性还是没有CSRF Token高，原因我们举例进行说明。")]),t._v(" "),a("p",[t._v("由于任何跨域都会导致前端无法获取Cookie中的字段（包括子域名之间），于是发生了如下情况：")]),t._v(" "),a("ul",[a("li",[t._v("如果用户访问的网站为"),a("code",[t._v("www.a.com")]),t._v("，而后端的api域名为"),a("code",[t._v("api.a.com")]),t._v("。那么在"),a("code",[t._v("www.a.com")]),t._v("下，前端拿不到"),a("code",[t._v("api.a.com")]),t._v("的Cookie，也就无法完成双重Cookie认证。")]),t._v(" "),a("li",[t._v("于是这个认证Cookie必须被种在"),a("code",[t._v("a.com")]),t._v("下，这样每个子域都可以访问。")]),t._v(" "),a("li",[t._v("任何一个子域都可以修改"),a("code",[t._v("a.com")]),t._v("下的Cookie。")]),t._v(" "),a("li",[t._v("某个子域名存在漏洞被XSS攻击（例如"),a("code",[t._v("upload.a.com")]),t._v("）。虽然这个子域下并没有什么值得窃取的信息。但攻击者修改了"),a("code",[t._v("a.com")]),t._v("下的Cookie。")]),t._v(" "),a("li",[t._v("攻击者可以直接使用自己配置的Cookie，对XSS中招的用户再向"),a("code",[t._v("www.a.com")]),t._v("下，发起CSRF攻击。")])]),t._v(" "),a("p",[a("strong",[t._v("用双重Cookie防御CSRF的优点：")])]),t._v(" "),a("ul",[a("li",[t._v("无需使用Session，适用面更广，易于实施。")]),t._v(" "),a("li",[t._v("Token储存于客户端中，不会给服务器带来压力。")]),t._v(" "),a("li",[t._v("相对于Token，实施成本更低，可以在前后端统一拦截校验，而不需要一个个接口和页面添加。")])]),t._v(" "),a("p",[a("strong",[t._v("用双重Cookie防御CSRF的缺点：")])]),t._v(" "),a("ul",[a("li",[t._v("Cookie中增加了额外的字段。")]),t._v(" "),a("li",[t._v("如果有其他漏洞（例如XSS），攻击者可以注入Cookie，那么该防御方式失效。")]),t._v(" "),a("li",[t._v("难以做到子域名的隔离。")]),t._v(" "),a("li",[t._v("为了确保Cookie传输安全，采用这种防御方式的最好确保用整站HTTPS的方式，如果还没切HTTPS的使用这种方式也会有风险。")])]),t._v(" "),a("h3",{attrs:{id:"_4-5-samesite-cookie属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-samesite-cookie属性"}},[t._v("#")]),t._v(" 4.5.Samesite Cookie属性")]),t._v(" "),a("p",[t._v("见 [Samesite  Cookie](./Samesite  Cookie)")]),t._v(" "),a("blockquote",[a("p",[t._v("参考转自：")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6844903689702866952",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端安全系列之二：如何防止CSRF攻击？"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);