(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{623:function(s,t,a){"use strict";a.r(t);var e=a(17),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"如何实现浏览器内多个标签也之间的通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现浏览器内多个标签也之间的通信"}},[s._v("#")]),s._v(" 如何实现浏览器内多个标签也之间的通信")]),s._v(" "),a("h3",{attrs:{id:"localstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#localstorage"}},[s._v("#")]),s._v(" localStorage")]),s._v(" "),a("p",[s._v("localStorage 是浏览器多个标签共用的存储空间，所以可以用来实现多标签之间的通信（ ps : session 是会话级的存储空间，每个标签页都是单独的）。")]),s._v(" "),a("h3",{attrs:{id:"sharedworker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sharedworker"}},[s._v("#")]),s._v(" SharedWorker")]),s._v(" "),a("p",[s._v("SharedWorker 可以被多个 window 共同使用，但必须保证这些标签页都是同源的（相同的协议，＋门和端口号）")]),s._v(" "),a("h3",{attrs:{id:"websocket-通讯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket-通讯"}},[s._v("#")]),s._v(" WebSocket 通讯")]),s._v(" "),a("p",[s._v("全双工（ ful - duplex ）通信自然可以实现多个标签之间的通信")]),s._v(" "),a("h3",{attrs:{id:"定时器-setlnterval-cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时器-setlnterval-cookie"}},[s._v("#")]),s._v(" 定时器 setlnterval + cookie")]),s._v(" "),a("ul",[a("li",[s._v("在页面 A 设置一个使用 setlnterval 定时器不断刷新，检查 Cookies 的值是否发生变化，如果变化\n就进行刷新的操作。")]),s._v(" "),a("li",[s._v("由于 Cookies 是在同域可读的，所以在页面 B 审核的时候改变 Cookies 的值，页面 A 自然是可以拿到的。")])]),s._v(" "),a("p",[s._v("这样做确实可以实现我想要的功能，但是这样的方法相当浪费资源。虽然在这个性能过盛的时代，浪费不浪费也感觉不出来，但是这种实现方案，确实不够优雅。")]),s._v(" "),a("h3",{attrs:{id:"postmessage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#postmessage"}},[s._v("#")]),s._v(" postMessage")]),s._v(" "),a("p",[s._v("两个需要交互的 tab 页面具有依赖关系。")]),s._v(" "),a("p",[s._v("如 A 页面中通过 JavaScript 的 window . open 打开 B 页面，或者 B 页面通过 iframe 嵌入至 A 页面，此种情形最简单，可以通过HTML5的 window . postMessage API 完成通信，由于 postMessage 函数是绑定在 window 全局对象下，因此通信的页面中必须有一个页面（如 A 页面）可以获取另一个页面（如 B 页面）的 window 对象，这样才可以完成单向通信； B 页面无需获取 A 页面的 window 对象，如果需要 B 页面对 A 页面的通信，只需要在 B 页面侦听 message 事件，获取事件中传递的 source 对象，该对象即为 A 页面 window 对象的引用：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//B页面")]),s._v("\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addEventListner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'message'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("origin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("postMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'message echo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("postMessage 的第一个参数为消息实体，它是一个结构化对象，即可以通过“ JSON . stringify 和 JSON . parse ”函数还原的对象；第二个参数为消息发送范围选择器，设置为“”意味着只发送消息给同源的页面，设置为“*”则发送全部页面。")])])}),[],!1,null,null,null);t.default=n.exports}}]);