(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{621:function(a,t,s){"use strict";s.r(t);var v=s(17),e=Object(v.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"doctype-作用-严格模式与混杂模式如何区分-它们有何意义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#doctype-作用-严格模式与混杂模式如何区分-它们有何意义"}},[a._v("#")]),a._v(" Doctype 作用？严格模式与混杂模式如何区分？它们有何意义？")]),a._v(" "),s("p",[s("strong",[a._v("Doctype 作用")])]),a._v(" "),s("p",[a._v("Doctype DOCTYPE 位于文档的最前面，html标签之前，告诉浏览器以何种方式解析该文档，这里有两种模式，严格模式和混杂模式。")]),a._v(" "),s("p",[s("strong",[a._v("区别：")])]),a._v(" "),s("p",[a._v("不同的文档模式主要影响css的呈现，尤其是盒模型的解析。")]),a._v(" "),s("ul",[s("li",[a._v("严格模式的排版和 JS 运作模式是以该浏览器支持的最高标准运行。一般以标准模式呈现页面。")]),a._v(" "),s("li",[a._v("混杂模式，向后兼容，模拟老式浏览器，防止浏览器无法兼容页面。")])]),a._v(" "),s("p",[s("strong",[a._v("意义：")]),a._v("\n浏览器根据doctype是否存在以及使用的哪种DTD来选择要使用的呈现方式，如果存在完整的doctype则以标准模式呈现页面，不存在或者是形式不正确则会导致页面以混杂模式呈现。")]),a._v(" "),s("h2",{attrs:{id:"什么是dom和bom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是dom和bom"}},[a._v("#")]),a._v(" 什么是DOM和BOM？")]),a._v(" "),s("p",[a._v("DOM：文档对象模型，描述了处理网页内容的方法和接口。最根本对象是document")]),a._v(" "),s("p",[a._v("由于DOM的操作对象是文档，所以DOM和浏览器没有直接关系")]),a._v(" "),s("p",[a._v("BOM：浏览器对象模型，描述了与浏览器进行交互的方法和接口。由Navigator、history、screen、location、window五个对象组成的，最根本对象是window。")]),a._v(" "),s("p",[a._v("用来获取或设置浏览器的属性、行为，例如：新建窗口、获取屏幕分辨率、浏览器的标签页、地址栏等")]),a._v(" "),s("h2",{attrs:{id:"_1、列出常见的行内元素、块级元素、空-void-元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、列出常见的行内元素、块级元素、空-void-元素"}},[a._v("#")]),a._v(" "),s("strong",[a._v("1、列出常见的行内元素、块级元素、空(void)元素？")])]),a._v(" "),s("p",[s("strong",[a._v("块级元素")]),a._v("  block")]),a._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[a._v("< div > 、 < p > 、 < h1 > ... < h6 > 、 < ol > 、 < ul > 、 < dl > 、 < table > 、 "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("address")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" 、 < blockquote >  、 < form >\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("strong",[a._v("行内(内联)元素")]),a._v("  inline")]),a._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[a._v("< a > 、 < span > 、 < br > 、 < i > 、 < em > 、 < strong > 、 < label > 、 < q > 、 "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("var")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" 、 < cite > 、 < code >\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("strong",[a._v("内联块状元素")]),a._v(" inline-block")]),a._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[a._v("< img > 、 < input >\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("strong",[a._v("空(void)元素")]),a._v("，即系没有内容的HTML元素")]),a._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[a._v("<br/ >、 <hr/ >、 <img/ >、<input/ >、<link/ >、<meta/ >、< br/ >\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h2",{attrs:{id:"js-动画与-css-动画区别及相应实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-动画与-css-动画区别及相应实现"}},[a._v("#")]),a._v(" Js 动画与 CSS 动画区别及相应实现")]),a._v(" "),s("p",[s("strong",[a._v("CSS3的动画")])]),a._v(" "),s("p",[a._v("优点")]),a._v(" "),s("ul",[s("li",[a._v("在性能上会稍微好一些，浏览器会对CSS3的 动画做一些优化。")]),a._v(" "),s("li",[a._v("代码相对简单")])]),a._v(" "),s("p",[a._v("缺点")]),a._v(" "),s("ul",[s("li",[a._v("在动画控制上不够灵活")]),a._v(" "),s("li",[a._v("兼容性不好")])]),a._v(" "),s("p",[s("strong",[a._v("JavaScript 的动画")])]),a._v(" "),s("p",[a._v("正好弥补了这两个缺点，控制能力很强，可以单帧的控制、变换，同时写得好完全可以兼容IE6，并且功能强大。")]),a._v(" "),s("p",[a._v("对于一些复杂控制的动画，使用 javascript 会比较靠谱。而在实现一些小的交互动效的时候，就多考虑考虑 CSS 吧")]),a._v(" "),s("h2",{attrs:{id:"html-和css中图片加载与渲染规则是什么样的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#html-和css中图片加载与渲染规则是什么样的"}},[a._v("#")]),a._v(" html 和css中图片加载与渲染规则是什么样的？")]),a._v(" "),s("p",[s("strong",[a._v("图片加载和渲染的时机有可能是面这样：")])]),a._v(" "),s("ul",[s("li",[a._v("解析 HTML 时，如果遇到 img 或 picture 标签，将会加载图片")]),a._v(" "),s("li",[a._v("解析加载的样式，遇到 background-image 时，并不会加载图片，而会构建样式规则树")]),a._v(" "),s("li",[a._v("加载 JavaScript ，执行 JavaScript 代码，如果代码中有创建 img 元素之类，会添加到 DOM 树中；如查有添加 background - image 规则，将会添加到样式规则树中")]),a._v(" "),s("li",[a._v("DOM 树和样式规则匹配时构建渲染树，如果 DOM 树节点匹配到样式规则中的 backgorund- image ，则会加载背景图片")]),a._v(" "),s("li",[a._v("计算元素（图片）位置进行布局")]),a._v(" "),s("li",[a._v("开始渲染图片，浏览器将呈现渲染出来的图片")])]),a._v(" "),s("p",[s("strong",[a._v("Web 页面中不是所有的图片都会加载和渲染！根据前面介绍的浏览器加载和渲染机制，我们归纳为：")])]),a._v(" "),s("ul",[s("li",[a._v("< img >、< picture ＞和设置 background - image 的元素遇到 display : none 时，图片会加载但不会渲染；")]),a._v(" "),s("li",[a._v("< img >、< picture ＞和设置 background - image 的元素祖先元素设置 display : none 时， background - image 不会渲染也不会加载，而 img 和 picture 引入的图片不会渲染但会加载")]),a._v(" "),s("li",[a._v("< img >、< picture >和 background - image 引入相同路径相同图片文件名时，图片只会加载一次")]),a._v(" "),s("li",[a._v("样式文件中 background - image 引入的图片，如果匹配不到 DOM 元素，图片不会加载")]),a._v(" "),s("li",[a._v("伪类引入的 background - image ，比如： hoy 只有当伪类被触发时，图片才会加载")])])])}),[],!1,null,null,null);t.default=e.exports}}]);